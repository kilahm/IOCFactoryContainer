#! /usr/bin/env hhvm
<?hh

if(substr(php_sapi_name(), 0, 3) !== 'cli'){
    http_response_code(404);
    die();
}

// Find the composer autoloader
$basedir = __DIR__;

do {
    if(file_exists($basedir . '/composer.json') && file_exists($basedir . '/vendor/autoload.php')){
        require_once($basedir . '/vendor/autoload.php');
        break;
    }
    $basedir = dirname($basedir);
    if($basedir === '/'){
        die('You need to set up the project dependencies using the following commands:' . PHP_EOL .
            'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
            'php composer.phar install' . PHP_EOL);
    }
} while(true);

chdir($basedir);

$options = Map::fromArray(getopt('h', ['install-path:', 'help']));
if($options->containsKey('h') || $options->containsKey('help')) {
    die('findfactories <path/to/files> ... [--excludes=<space delimited list of exclude paths>] [--install-path=<path to install factory container>]');
}

$installPath = array_key_exists('install-path', $options) ? realpath($options['install-path']) : $basedir;

if(
    !is_dir($installPath) &&
    !mkdir($installPath, true)
) {
    die('Unable to create the install path ' . $installPath);
}

use kilahm\Clio\Clio;
use kilahm\IOC\ContainerCompiler;
use kilahm\Scanner\ClassScanner;

$clio = Clio::fromCli();

$excludeOpt = $clio->opt('exclude')->aka('e')->aka('excludes')->aka('skip')
    ->withValue()
    ->describedAs('Space delimited list of directories to skip');
$installDirOpt = $clio->opt('install-to')->aka('i')
    ->withValue()
    ->isPath()
    ->describedAs('Path to install FactoryContainer.php');
$arg = $clio->arg('ScanPath')->describedAs('Base path to scan.  There may be any number of these.');

if($arg->getVal() === ''){
    $clio->help();
    exit(1);
}

$scanner = new ClassScanner($clio->getArgVals()->toSet(), Set::fromItems(explode(' ', $excludeOpt->getVal())));

$compiler = new ContainerCompiler($scanner->mapClassToFile());

echo PHP_EOL . 'Generating factory contianer.' . PHP_EOL;

$compiler->compile($basedir . '/FactoryContainer.php');

echo 'Done generating factory container.' . PHP_EOL . PHP_EOL;
