<?hh // strict

namespace kilahm\IOC;

class FactoryContainer
{
    private FactoryRunner<FactoryContainer> $runner;

    public function __construct()
    {
        $this->runner = new FactoryRunner();
        $this->runner->setContainer($this);
    }

    <<__Memoize>>
    public function getB() : \kilahm\IOC\Test\Fixtures\ContainableB
    {
        return $this->newB();
    }

    public function newB() : \kilahm\IOC\Test\Fixtures\ContainableB
    {
        return $this->runner->make(class_meth('\kilahm\IOC\Test\Fixtures\ContainableB', 'factory'));
    }

    <<__Memoize>>
    public function getC() : \kilahm\IOC\Test\Fixtures\ContainableC
    {
        return $this->newC();
    }

    public function newC() : \kilahm\IOC\Test\Fixtures\ContainableC
    {
        return $this->runner->make(class_meth('\kilahm\IOC\Test\Fixtures\ContainableC', 'factory'));
    }

    <<__Memoize>>
    public function getA() : \kilahm\IOC\Test\Fixtures\ContainableA
    {
        return $this->newA();
    }

    public function newA() : \kilahm\IOC\Test\Fixtures\ContainableA
    {
        return $this->runner->make(class_meth('\kilahm\IOC\Test\Fixtures\ContainableA', 'factory'));
    }

    <<__Memoize>>
    public function getFromProvider() : \kilahm\IOC\Test\Fixtures\Containable
    {
        return $this->newFromProvider();
    }

    public function newFromProvider() : \kilahm\IOC\Test\Fixtures\Containable
    {
        return $this->runner->make(class_meth('\kilahm\IOC\Test\Fixtures\Provider', 'provide'));
    }

    <<__Memoize>>
    public function getMakeit() : \kilahm\IOC\Test\Fixtures\Containable
    {
        return $this->newMakeit();
    }

    public function newMakeit() : \kilahm\IOC\Test\Fixtures\Containable
    {
        return $this->runner->make(class_meth('\kilahm\IOC\Test\Fixtures\Containable', 'factory'));
    }
}